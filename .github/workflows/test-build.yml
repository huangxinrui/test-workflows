name: test build
on:
  workflow_dispatch:
    inputs:
      test:
        description: "Service Type For AWS"
        required: false
        type: string
env:
  env_test: ${{ inputs.test }}
  LAST_CHILD1: 'L1-1'
  LAST_CHILD2: 'L2-1'
  LAST_CHILD3: 'L3-1'
jobs:
  test_job_name:
    name: test build job
    strategy:
      matrix:
        node-version: [14.x]
    runs-on: ubuntu-latest
    env:
      LAST_CHILD2: 'L2-2'
      LAST_CHILD3: 'L3-2'
    steps:
      - uses: actions/checkout@v2
      - name: show node version
        id: node_version
        run: node -v
      - name: show branch
        run: git branch
      - name: echo input value
        run: echo "first-'${{ github.event.inputs.test }}'; last- ${{ github.event.inputs }}"
      - name: echo env value
        run: echo "env.env_test->$env_test"
      - name: echo steps env value
        env:
          MY_VAR: Hi there! My name is
          FIRST_NAME: Mona
          MIDDLE_NAME: The
          LAST_NAME: Octocat
          LAST_CHILD3: 'L3-3'
        run: |
          echo $MY_VAR $FIRST_NAME $MIDDLE_NAME $LAST_NAME.
          echo $LAST_CHILD1 $LAST_CHILD2 $LAST_CHILD3
      - name: check folder
        if: hashFiles('./test-build.yml') != ''
        run: |
          if [[ ! -d "./.github" ]]; then
            echo "文件夹不存在"
          else
            echo "文件夹存在"
          fi
      - name: check folder 2
        if: hashFiles('./.github/workflows/test-build.yml') != ''
        run: |
          if [[ ! -d "./.github" ]]; then
            echo "文件夹不存在"
          else
            echo "文件夹存在"
          fi
      - id: step1
        run: echo "::set-output name=test::hello"
      - name: step2
        run: echo "::set-output name=test::hello"
      - name: 'test1'
        run: echo ${{ steps.step1.outputs.test }}
      - name: 'test2'
        run: echo ${{ steps.step2.outputs.test }}
      - name: 'test3'
        run: echo ${{ steps.step1.outputs }}
      - name: 'test4'
        run: echo ${{ steps.step2.outputs }}
      - name: show hash 0
        if: steps.node_version.outputs == 'v16.15.0'
        run: echo "node check version success"
      - name: 'echo secrets 1'
        run: echo ${{ secrets.SECRET_TEST }}
      - name: 'echo secrets 2'
        run: echo ${ env.LAST_CHILD1 }
